---
- name: Test the website
  hosts: webservers
  become: yes
  become_user: root

  tasks:
    - name: Check that port 80 is listening on managed node
      ansible.builtin.wait_for:
        port: 80
        state: started
        timeout: 3

    - name: Verify that apache is available remotely
      delegate_to: localhost
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}/index.html"

    - name: Stat apache2
      ansible.builtin.stat:
        path: /usr/sbin/apache2
      register: i

    - name: Fail if apache2 doesn't existing
      ansible.builtin.assert:
        that:
          - "i.stat.exists"
        fail_msg: "/usr/sbin/apache2 doesn't exist"
        success_msg: "/usr/sbin/apache2 exists"

    - name: Verify apache2 is enabled
      shell: systemctl list-unit-files | grep apache2.service | awk -F\  '{print $2}'
      register: c

    - name: Fail if apache2 is not enabled
      ansible.builtin.assert:
        that:
          - "c.stdout == 'enabled'"
        fail_msg: "apache2 service is not enabled"
        success_msg: "apache2 service is enabled"

    - name: Stat Index.html
      ansible.builtin.stat:
        path: /var/www/html/index.html
      register: a

    - name: Confirm that index.html exists and is owned by root
      ansible.builtin.assert:
        that:
          - "a.stat.exists"
          - "a.stat.pw_name == 'root'"
        fail_msg: "File esither doesn't exist or is not owned by root"
        success_msg: "File exists and is owned by root"

    - name: Verify vars.html
      block: 
        - name: Stat vars.html
          ansible.builtin.stat:
            path: /var/www/html/vars.html
          register: a

        - name: Confirm that vars.html exists and is owned by root
          ansible.builtin.assert:
            that:
              - "a.stat.exists"
              - "a.stat.pw_name == 'root'"
            fail_msg: "File esither doesn't exist or is not owned by root"
            success_msg: "File exists and is owned by root"
